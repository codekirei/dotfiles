// -*-json-*-
////////////////////////////////////////////////////////////
// ESLint configuration
// github.com/codekirei
// current ESLint v1.5.1 (9.22.15)
////////////////////////////////////////////////////////////
// Active Settings
{
  "env": {
    "es6": true,
    "mocha": true,
    "node": true
  },
  "rules": {
    // Possible Errors
    "comma-dangle": [2, "never"],
    "no-cond-assign": [2, "except-parens"],
    "no-dupe-args": 2,
    "no-dupe-keys": 2,
    "no-duplicate-case": 2,
    "no-empty": 2,
    "no-empty-character-class": 2,
    "no-extra-boolean-cast": 2,
    "no-extra-parens": 2,
    "no-extra-semi": 2,
    "no-func-assign": 2,
    "no-invalid-regexp": 2,
    "no-irregular-whitespace": 2,
    "no-regex-spaces": 2,
    "no-unreachable": 2,
    "use-isnan": 2,
    "valid-jsdoc": 1,
    "valid-typeof": 2,
    "no-unexpected-multiline": 2,
    // Best Practices
    "curly": [2, "multi-line"],
    "dot-location": [2, "property"],
    "eqeqeq": [2, "smart"],
    "no-caller": 2,
    "no-else-return": 2,
    "no-eq-null": 2,
    "no-eval": 2,
    "no-extend-native": 2,
    "no-extra-bind": 2,
    "no-floating-decimal": 2,
    "no-implied-eval": 2,
    "no-invalid-this": 0,
    "no-iterator": 2,
    "no-lone-blocks": 2,
    "no-native-reassign": 2,
    "no-new": 2,
    "no-new-func": 2,
    "no-new-wrappers": 2,
    "no-process-env": 2,
    "no-proto": 2,
    "no-redeclare": 2,
    "no-return-assign": 2,
    "no-script-url": 2,
    "no-self-compare": 2,
    "no-sequences": 2,
    "no-throw-literal": 2,
    "no-unused-expressions": [1, { "allowTernary": true}],
    "no-useless-call": 2,
    "no-useless-concat": 2,
    "no-void": 2,
    "no-warning-comments": [1, { "terms": ["fixme"], "location": "anywhere" }],
    "no-with": 2,
    "wrap-iife": [2, "inside"],
    "yoda": [2, "never", { "exceptRange": true}],
    // Variables
    "no-delete-var": 2,
    "no-label-var": 2,
    "no-shadow": 2,
    "no-shadow-restricted-names": 2,
    "no-undef": 2,
    "no-undef-init": 2,
    "no-undefined": 1,
    "no-unused-vars": [1, {"vars": "local", "args": "none"}],
    // Node.js
    "callback-return": [2, ["callback", "cb", "next", "done"]],
    "global-require": 2,
    "handle-callback-err": [2, "^.*(e|E)rr" ],
    "no-mixed-requires": 2,
    "no-new-require": 2,
    "no-path-concat": 2,
    "no-process-exit": 0,
    // Stylistic Issues
    "array-bracket-spacing": [2, "never"],
    "brace-style": [2, "1tbs", {"allowSingleLine": true}],
    "camelcase": [2, {"properties": "always"}],
    "comma-style": [2, "last"],
    "computed-property-spacing": [2, "never"],
    "eol-last": 2,
    "func-style": [2, "declaration"],
    "indent": [2, 2, {"SwitchCase": 1}],
    "lines-around-comment": [0],
    "linebreak-style": [2, "unix"],
    "max-nested-callbacks": [0],
    "new-cap": [2, {newIsCap: true, capIsNew: true}],
    "new-parens": 2,
    "no-array-constructor": 2,
    "no-continue": 2,
    "no-inline-comments": 1,
    "no-lonely-if": 2,
    "no-mixed-spaces-and-tabs": 2,
    "no-multiple-empty-lines": [2, {"max": 1}],
    "no-new-object": 2,
    "no-trailing-spaces": [2, {skipBlankLines: false}],
    "no-underscore-dangle": 0,
    "no-unneeded-ternary": 2,
    "object-curly-spacing": [2, "never"],
    "one-var": [2, "never"],
    "operator-assignment": [2, "always"],
    "padded-blocks": [2, "never"],
    "quote-props": [2, "as-needed", {"unnecessary": false}],
    "quotes": [2, "single"],
    "semi": [2, "never"],
    "space-after-keywords": [2, "always"],
    "space-before-keywords": [2, "always"],
    "space-before-blocks": [2, "always"],
    "space-before-function-paren": [2, "never"],
    "space-in-parens": [2, "never"],
    "space-infix-ops": [2, {"int32Hint": true}],
    "space-return-throw-case": 2,
    "space-unary-ops": [2, {"words": true, "nonwords": false}],
    "spaced-comment": [2, "always", {"exceptions": ["-"]}],
    // ES6
    "arrow-spacing": [2, {"before": true, "after": true}],
    "constructor-super": 2,
    "generator-star-spacing": [2, {"before": false, "after": true}],
    "no-class-assign": 2,
    "no-const-assign": 2,
    "no-dupe-class-members": 2,
    "no-this-before-super": 2,
    "no-var": 2,
    "object-shorthand": 1,
    "prefer-arrow-callback": 2,
    "prefer-spread": 2,
    "prefer-reflect": 0, // not implemented yet in node
    "prefer-template": 2,
    "require-yield": 2,
    // Legacy
    "max-depth": [2, 3],
    "max-len": [2, 80, 4],
    "no-bitwise": 2
  }
}

////////////////////////////////////////////////////////////
// Parsers
////////////////////////////////////////////////////////////
// default:
// "parser": "esprima",
// using babel:
// "parser": "babel-eslint",

////////////////////////////////////////////////////////////
// Environments
////////////////////////////////////////////////////////////
/**
 * "amd": true,
 * "applescript": true,
 * "browser": true,
 * "commonjs": true,
 * "embertest": true,
 * "es6": true,
 * "jasmine": true,
 * "jest": true,
 * "jquery": true,
 * "meteor": true,
 * "mocha": true,
 * "mongo": true,
 * "node": true
 * "phantomjs": true,
 * "prototypejs": true,
 * "protractor": true,
 * "qunit": true,
 * "serviceworker": true,
 * "shelljs": true,
 * "worker": true,
 */

////////////////////////////////////////////////////////////
// Globals
////////////////////////////////////////////////////////////
// "globals": {
//   "foo": false
// },

////////////////////////////////////////////////////////////
// Possible Errors
////////////////////////////////////////////////////////////
/**
 * comma-dangle
 * Allow comma after last entity in object or array
 * ex: var foo = ['a', 'b',]
 * @param - never, always, always-multiline
 *
 * no-cond-assign
 * Disallow assignment in conditional statement
 * ex: if (a = b) { foo() }
 * @param - except-parens, always
 *
 * no-console
 * Disallow use of console
 * ex: console.log()
 *
 * no-constant-condition
 * Disallow conditional statements that are constant
 * ex: if (true) { foo() }
 *
 * no-control-regex
 * Disallow special ASCII chars (0-31) in regex
 * ex: /\\x1f/
 *
 * no-debugger
 * Disallow use of debugger
 * ex: debugger;
 *
 * no-dupe-args
 * Disallow multiple identical function params
 * ex: function foo(a, a){}
 *
 * no-dupe-keys
 * Disallow multiple identical object keys
 * ex: var foo = {a: true, a: true}
 *
 * no-duplicate-case
 * Disallow multiple identical case labels in a switch statement
 * ex: case 1: break; case 1: break;
 *
 * no-empty
 * Disallow empty block statements
 * ex: if (foo) {}
 *
 * no-empty-character-class
 * Disallow empty character classes in regex
 * ex: /^abc[]/
 *
 * no-ex-assign
 * Disallow assignment to the catch param in a try/catch block
 * ex: try {} catch(e) { e = foo }
 *
 * no-extra-boolean-cast
 * Disallow unnecessary double negation of boolean constructs
 * ex: if (!!true) {}
 *
 * no-extra-parens
 * Disallow unnecessary parens
 * ex: var a = (1 + 2)
 *
 * no-extra-semi
 * Disallow unnecessary semi-colons
 * ex: var a = 1;;
 *
 * no-func-assign
 * Disallow reassigning a previously declared function
 * ex: function foo() { foo = bar }
 *
 * no-inner-declarations
 * Disallow non-top-level function declaration
 * ex: if (foo) { function a() {}}
 * @param - functions, both
 *
 * no-invalid-regexp
 * Disallow malformed regex
 * ex: /'[']/
 *
 * no-irregular-whitespace
 * Disallow alternative whitespace characters like NBSP
 * ex: \u00A0
 *
 * no-negated-in-lhs
 * Disallow negated left operand of `in` operator
 * ex: (!a in b)
 *
 * no-obj-calls
 * Disallow calling global objects as functions
 * ex: var foo = JSON()
 *
 * no-regex-spaces
 * Disallow multiple spaces in regex
 * ex: /foo  bar/ vs /foo {2}bar/
 *
 * no-sparse-arrays
 * Disallow arrays with empty slots
 * ex: var foo = [,,]
 *
 * no-unreachable
 * Disallow code that will never execute
 * ex: function a() { return; console.log('nope')}
 *
 * use-isnan
 * Disallow use of NaN (use isNan() instead)
 * ex: if (foo == NaN) {}
 *
 * valid-jsdoc
 * Validate that JSDoc comments are syntactically correct
 *
 * valid-typeof
 * Validate that `typeof` comparisons use a valid `typeof` string
 * ex: `typeof foo === 'nubmer'` would error
 *
 * no-unexpected-multiline
 * Disallow newline between function call and params
 * ex: `var foo = bar\n(a)
 */

////////////////////////////////////////////////////////////
// Best Practices
////////////////////////////////////////////////////////////
/**
 * accessor-pairs
 * Require getters for setters
 * ex: `var a = { set a(foo) {...} }`
 *
 * block-scoped-var
 * Disallow use of a var outside the scope it is declared in
 * ex: `var a = 1; function b() { console.log(a); };` would error
 *
 * complexity
 * Cap number of linear logic branches
 * ex: if(foo) {} else if (bar) {} else (baz) {}
 * @param - integer
 *
 * consistent-return
 * Require each function to consistently return or not return a value
 * ex: `return foo;` vs `return;`
 *
 * curly
 * Require curly braces around block statements
 * ex: `if (foo) return;` would error
 * @param - all, multi-line, multi
 *
 * default-case
 * Require default case in switch statement
 * ex: switch (foo) { case 1: break; default:}
 *
 * dot-notation
 * Require dot notation where possible
 * ex: `foo.bar` vs `foo["bar"]`
 *
 * dot-location
 * Enforce newline before or after dot in object.property
 * ex: `object. \n property` vs `object \n .property`
 * @param - object, property
 *
 * eqeqeq
 * Require type-safe equality operators
 * ex: `===` vs `==`
 * @param - smart, allow-null
 *
 * guard-for-in
 * Require `if` statement in `for in` loop
 * ex: for (key in foo) { if (bar) { baz }}
 *
 * no-alert
 * Disallow `alert`, `confirm`, and `prompt`
 * ex: alert('hello world')
 *
 * no-caller
 * Disallow `arguments.caller` and `arguments.callee`
 * ex: function foo() { var callee = arguments.callee }
 *
 * no-div-regex
 * Disallow regex that looks like division
 * ex: `/=foo/` vs `/\=foo/`
 *
 * no-else-return
 * Disallow `else` after `return`
 * ex: if (foo) { return; } else { bar() }
 *
 * no-empty-label
 * Disallow labels for anything other than iteration or `switch`
 * ex: label: \n var x = 1
 *
 * no-eq-null
 * Disallow non-type-safe comparing to null
 * ex: if (foo == null) {}
 *
 * no-eval
 * Disallow `eval()`
 * ex: eval()
 *
 * no-extend-native
 * Disallow extending native objects
 * ex: Object.prototype.method = {}
 *
 * no-extra-bind
 * Disallow `.bind()` on functions not using `this`
 * ex: function foo() { return bar; }.bind(baz)
 *
 * no-fallthrough
 * Disallow `switch` `case` without `break`, `throw`, or `return`
 * ex: switch(foo) { case 1: bar; case 2: baz;}
 *
 * no-floating-decimal
 * Disallow leading or trailing decimals in numeric literals
 * ex: `.5` vs `0.5`
 *
 * no-implicit-coercion
 * Disallow shorthand type conversion
 * ex: `!!foo` vs `Booleaon(foo)`
 *
 * no-implied-eval
 * Prohibit code that is functionally equivalent to eval()
 * ex: setTimeout("alert('hello world');", 50)
 *
 * no-invalid-this
 * Require this to be inside a constructor or method
 * ex: `foo(() => this)` is an error
 *
 * no-iterator
 * Disallow usage of `__iterator__` prop
 * ex: Foo.prototype.__iterator__ = {}
 *
 * no-labels
 * Disallow labeled statements
 * ex: label: while (true) { while (true) { break label; }}
 *
 * no-lone-blocks
 * Disallow unnecessarily nested blocks
 * ex: {\n var foo = 1; \n}
 *
 * no-loop-func
 * Disallow creating functions inside loops
 * ex: for (var a of b) { function() {}}
 *
 * no-multi-spaces
 * Disallow multiple spaces
 * ex: var  a = 1
 *
 * no-multi-str
 * Disallow multiline strings
 * ex: "Line 1 \ \n Line 2";
 *
 * no-native-reassign
 * Disallow reassigning native objects
 * ex: String = 'nope'
 *
 * no-new
 * Disallow `new` without assigment or comparison
 * ex: `new Class()` vs `var foo = new Class()`
 *
 * no-new-func
 * Disallow `new Function()`
 * ex: var foo = new Function()
 *
 * no-new-wrappers
 * Disallow `new` with `String`, `Number`, and `Boolean`
 * ex: var foo = new Number(1)
 *
 * no-octal
 * Disallow ocal literals
 * ex: var num = 071
 *
 * no-octal-escape
 * Disallow escaped octals in strings
 * ex: var foo = "Abc \071"
 *
 * no-param-reassign
 * Disallow reassigning function params
 * ex: function foo(bar) { bar = baz }
 *
 * no-process-env
 * Disallow `process.env`
 * ex: if(process.env.NODE_ENV === "dev") {}
 *
 * no-proto
 * Disallow use of `__proto__` (use `getPrototypeOf` instead)
 * ex: var foo = obj.__proto__
 *
 * no-redeclare
 * Disallow multiple declarations of same var
 * ex:  var a = 1; var a = 2
 *
 * no-return-assign
 * Disallow assignment in return statement
 * ex: function foo() { return bar = baz }
 *
 * no-script-url
 * Disallow `javascript:`
 * ex: location.href = "javascript:void(0)";
 *
 * no-self-compare
 * Disallow comparisons between identical entities
 * ex: var a = 1; if (a === a) {}
 *
 * no-sequences
 * Disallow use of comma operator
 * ex: var a = (3, 5)
 *
 * no-throw-literal
 * Restrict what `throw` can throw
 * ex: throw 'err'
 *
 * no-unused-expressions
 * Disallow expressions that are never used
 * ex: "Hello world";
 *
 * no-useless-call
 * Disllow unnecessary `.call()` and `.apply()`
 * ex: `foo(a)` vs `foo.call(a)`
 *
 * no-useless-concat
 * Disallow unnecessary concatenation of same-line strings
 * ex: `"a" + "b"` vs `"ab"`
 *
 * no-void
 * Disallow use of `void`
 * ex: function foo() { return void 0; }
 *
 * no-warning-comments
 * Disallow comments containing specific terms
 * ex: // Todo: write error handler
 * no-with
 * Disallow `with` statement
 * ex: with (foo) {}
 *
 * radix
 * Require radix parameter in `parseInt()`
 * ex: parseInt('071', 10)
 *
 * vars-on-top
 * Disallow var declarations anywhere other than top of respective scope
 * ex: function() {}; var a = 1
 *
 * wrap-iife
 * Require immediately invoked function expressions to be wrapped in parens
 * ex: (function() { return foo; }())
 * @param - outside, inside, any
 *
 * yoda
 * Require or disallow yoda conditions
 * ex: if (color === 'red') vs if ('red' === color)
 * @param - never, always
 */

////////////////////////////////////////////////////////////
// Strict Mode
////////////////////////////////////////////////////////////
/**
 * strict
 * Controls use and location of stict directive
 * ex: "use strict";
 * @param - never, global, function
 */

////////////////////////////////////////////////////////////
// Variables
////////////////////////////////////////////////////////////
/**
 * init-declarations
 * Require or disallow initializing variables on declaration
 * ex: `var foo = bar` vs `var foo; foo = bar`
 *
 * no-catch-shadow
 * IE <= 8 bug with try/catch
 * ex: var err = 1; try { throw 2; } catch(err) {}; console.log(err)
 *
 * no-delete-var
 * Disallows `delete` operator on vars
 * ex: var a; delete a
 *
 * no-label-var
 * Disallow labels with identical names to vars
 * ex: var x = 1; function bar() { x: ... }
 *
 * no-shadow
 * Disallow redeclaring vars from containing scope
 * ex: var foo = 1; function() { var foo = 2 }
 *
 * no-shadow-restricted-names
 * Disallow reassigning restricted names like `undefined`
 * ex: var undefined = 'foo'
 *
 * no-undef
 * Disallow undeclared vars
 * ex: a = 1
 *
 * no-undef-init
 * Disallow assigning vars to `undefined`
 * ex: var foo = undefined
 *
 * no-undefined
 * Disallow use of `undefined` (use typeof and void 0)
 * ex: if (foo === undefined) { ... } else { return undefined }
 *
 * no-unused-vars
 * Disallow declaring vars that are not used
 * @param vars - all, local
 * @param args - all, after-used, none
 *
 * no-use-before-define
 * Disallow use of vars and functions pre-declaration (despite hoisting)
 * ex: console.log(a); var a = 'foo'
 */

////////////////////////////////////////////////////////////
// Node.js
////////////////////////////////////////////////////////////
/**
 * callback-return
 * Require return with callbacks outside main function body
 * ex: `function foo(err, cb) { if (err) { return cb(err) }}`
 *
 * global-require
 * Disallow `require()` outside of top-level scope
 * ex: `function foo() { require('bar) }` is an error
 *
 * handle-callback-err
 * Require handling the callback error
 * ex: function foo(err, res) { if (err) { ... } }
 * @param - regex to match error param
 *
 * no-mixed-requires
 * Disallow grouped variable declarations mixing types
 * ex: var a = 'foo', fs = require('fs')
 * @param - boolean that checks require types
 *
 * no-new-require
 * Disallow `new require` expression
 * ex: var server = new require('express')
 *
 * no-path-concat
 * Disallow path concatenation (use path.join())
 * ex: var filePath = __dirname + '/aFile.js'
 *
 * no-process-exit
 * Disallow use of `process.exit()`
 * ex: try { ... } catch(err) { process.exit(1) }
 *
 * no-restricted-modules
 * Blacklist node modules
 * @param - comma-joined list of strings to blacklist
 *
 * no-sync
 * Disallow synchronous methods (async is usually preferable)
 * ex: fs.readFileSync('aFile.js', 'utf8')
 */

////////////////////////////////////////////////////////////
// Stylistic Issues
////////////////////////////////////////////////////////////
/**
 * array-bracket-spacing
 * Require or disallow spaces inside array brackets
 * ex: `var arr = ["a"]` vs `var arr = [ "a" ]`
 *
 * block-spacing
 * Require or disallow spaces inside single line blocks
 * ex: `{...}` vs `{ ... }`
 *
 * brace-style
 * Require specific brace placement
 * @param - 1tbs, stroustrup
 * @param allowSingleLine - boolean
 *
 * camelcase
 * Require camelCase
 * ex: `var fooBar` vs `var foo_bar`
 * @param properties - always, never
 *
 * comma-spacing
 * Require comma spacing
 * ex: var a, b ,c
 * @param before - boolean
 * @param after - boolean
 *
 * comma-style
 * Require specific comma placement in multi-line lists
 * ex: `, a = "foo"` vs `a = "foo",`
 * @param - last, first
 *
 * computed-property-spacing
 * Disallow or require spaces inside properties
 * ex: `foo[a]` vs `foo[ a ]`
 * @param - always, never
 *
 * consistent-this
 * Require a specific var name when assigning `this`
 * ex: var self = this
 * @param - a string
 *
 * eol-last
 * Require file to end with newline
 *
 * func-names
 * Disallow anonymous functions (helpful for debugging)
 * ex: `function() {}` vs `function foo()`
 *
 * func-style
 * Require function declaration or expression style
 * ex: `var foo = function(){}` vs `function foo(){}`
 * @param - declaration, expression
 *
 * id-length
 * Limit min and/or max length of identifiers
 * ex: `var a` vs `var aReallyDescriptiveVariableId`
 * @param min
 * @param max
 *
 * id-match
 * Require identifiers to match a regex
 * @param - regex
 * @param properties
 *
 * indent
 * Require specific indentation style
 * @param - number of spaces or "tab"
 *
 * jsx-quotes
 * Enforce single or double quotes for strings in JSX
 * ex: `<a foo='bar' />` vs `<a foo="bar" />`
 *
 * key-spacing
 * Require specific spacing around the colon between object keys and values
 * ex: `key: val` vs `key:val` vs `key : val`
 * @param beforeColon
 * @param afterColon
 * @param align - value, colon
 *
 * lines-around-comment
 * Enforce newlines around comments
 * @param beforeBlockComment
 * @param afterBlockComment
 * @param beforeLineComment
 * @param afterLineComment
 * @param allowBlockStart
 * @param allowBlockEnd
 *
 * linebreak-style
 * Disallow mixing CRLF and LF
 * ex: `\r\n` vs `\n`
 * @param - unix, windows
 *
 * max-nested-callbacks
 * Disallow nesting logic beyond a specific number
 * ex: function foo() { function bar() { function baz() {}}}
 * @param - number of maximum acceptable callbacks
 *
 * new-cap
 * Require constructors to be capitalized
 * ex: `var foo = new Bar()`
 * @param {Array} newIsCapExceptions
 * @param {Array} capIsNewExceptions
 *
 * new-parens
 * Require parens when invoking a constructor even without arguments
 * ex: `var foo = new Bar()` vs `var foo = new Bar`
 *
 * newline-after-var
 * Require or disallow a blank newline after var declarations
 * @param - always, never
 *
 * no-array-constructor
 * Disallow array constructor
 * ex: var foo = new Array(1, 2, 3)
 *
 * no-continue
 * Disallow continue statement
 * ex: if(foo) { continue; }
 *
 * no-inline-comments
 * Disallow comments on the same line as code
 * ex: var foo = 1 // blah blah blah
 *
 * no-lonely-if
 * Disallow if as only statement in else block
 * ex: `if(foo) {bar} else { if (baz) {qux} }` vs `else if`
 *
 * no-mixed-spaces-and-tabs
 * Disallow indenting with spaces and tabs on same line
 * @param - "smart-tabs" allows mixing when used for vertical alignment
 *
 * no-multiple-empty-lines
 * Control number of consecutive blank lines allowed
 * ex: var foo = 1 \n\n //logic
 * @param max - number of empty lines allowed consecutively
 *
 * no-nested-ternary
 * Disallow nesting ternary expressions
 * ex: var foo = a ? b: c === d ? e : f
 *
 * no-new-object
 * Disallow object constructor
 * ex: var obj = new Object()
 *
 * no-spaced-func
 * Disallow space between function name and args
 * ex: `fn ()` vs `fn()`
 *
 * no-ternary
 * Disallow ternary operators
 * ex: var foo = bar ? baz: qux
 *
 * no-trailing-spaces
 * Disallow trailing whitespace at end of line
 * @param {boolean}
 *
 * no-underscore-dangle
 * Disallow dangling underscores in identifiers
 * ex: var _foo
 *
 * no-unneeded-ternary
 * Disallow boolean literals in ternary expressions
 * ex: `var foo = test === 1 ? true: false`
 *
 * object-curly-spacing
 * Require or disallow spaces inside object braces
 * ex: `{ foo: "bar" }` vs `{foo: "bar"}`
 *
 * one-var
 * Require or disallow one grouped var delcaration per scope block
 * ex: `var foo, bar;` vs `var foo; var bar;`
 * @param - always, never
 *
 * operator-assignment
 * Require or disallow shorthand for simple mathmatical assignment
 * ex: `x += y` vs `x = x + y`
 * @param - always, never
 *
 * operator-linebreak
 * Enforce position of mathematical operators with respect to linebreaks
 * ex: var foo = 'string1' + \n 'string2'
 * @param - after, before, none
 *
 * padded-blocks
 * Require or disallow blank lines at the beginning and end of blocks
 * ex: function foo(){ \n ... \n }
 * @param - always, never
 *
 * quote-props
 * Require or disallow quoted object keys
 * ex: var obj = { "a": 1}
 * @param - always, as-needed
 *
 * quotes
 * Require single, double, or back ticks for string literals
 * ex: "string" vs 'string' vs `string`
 * @param - single, double, backtick
 * @param avoid-escape - allows other tickmarks to avoid escaping nested quotes
 *
 * require-jsdoc
 * Require jsdoc comment for every function
 *
 * semi
 * Disallow or require semicolons at the end of statements
 * ex: `var foo` vs `var foo;`
 * @param - always, never
 *
 * semi-spacing
 * Require spacing before or after semicolons
 * ex: var foo ;var bar; var baz
 * @param {boolean} before
 * @param {boolean} after
 *
 * sort-vars
 * Require alphabatizing vars declared in the same block
 * ex: `var a, b` vs `var b, a`
 * @param {boolean} ignoreCase
 *
 * space-after-keywords
 * Require or disallow spaces after certain keywords like if, else, for
 * ex: `if(a) {foo}` vs `if (a) {foo}`
 * @param - always, never
 *
 * space-before-keywords
 * Require or disallow spaces before certain keywords like if, else, for
 * ex: `if {} else {}` vs `if {}else {}`
 * @param - always, never
 *
 * space-before-blocks
 * Require or disallow spaces before blocks
 * ex: `if (a) {foo}` vs `if (a){foo}`
 * @param - always, never
 *
 * space-before-function-paren
 * Require or disallow spaces between functions and invocations
 * ex: `function foo()` vs `function foo ()`
 * @param anonymous - always, never
 * @param named - always, never
 *
 * space-in-parens
 * Require or disallow spaces in parens
 * ex: `foo( bar )` vs `foo(bar)`
 * @param - always, never
 *
 * space-infix-ops
 * Require spaces around infix operators
 * ex: `1 + 2` vs `1+2`
 * @param {boolean} int32Hint - allow foo|0 to force signed 32bit int
 *
 * space-return-throw-case
 * Require spaces after `return`, `throw`, and `case`
 * ex: `case'a'` vs `case 'a'`
 *
 * space-unary-ops
 * Require or disallow spaces around unary operators
 * ex: `i++` vs `i ++`
 * @param {boolean} words - e.g. `new`, `typeof`
 * @param {boolean} nonwords - e.g. `++`, `!`
 *
 * spaced-comment
 * Requires or disallows whitespace at start of single line comment (`//`)
 * ex: `//foo` vs `// foo`
 * @param - always, never
 * @param {string[]} exceptions
 *
 * wrap-regex
 * Require regex literals to be wrapped in parens
 * ex: (/foo/)
 */

////////////////////////////////////////////////////////////
// ES6
////////////////////////////////////////////////////////////
/**
 * arrow-parens
 * Require parens around params of arrow functions
 * ex: `(foo) => {}`
 * @param - always, as-needed
 *
 * arrow-spacing
 * Require spaces around arrow of arrow functions
 * ex: `()=>{}` vs `() => {}`
 * @param before
 * @param after
 *
 * constructor-super
 * Verify super calls in class constructors
 * ex: `class foo { constructor() { super () }}` is an error
 *
 * Require or disallow spaces around the star in generator functions
 * ex: `function * foo()` vs `function* foo()` vs `function *foo()`
 * @param - before, after, both, neither
 *
 * no-class-assign
 * Disallow modifying a declared class
 * ex: `class Foo { }; foo = bar;`
 *
 * no-const-assign
 * Disallow modifying a declared const
 * ex: `const foo = bar; foo = baz;`
 *
 * no-dupe-class-members
 * Disallow declaring identical class members
 * ex: `class Foo { bar() {...} bar() {...} }`
 *
 * no-this-before-super
 * Disallow `this` and `super` before `super()` in constructors
 * ex: `constructor() { this = foo; super() }` is an error
 *
 * Require `let` or `const` instead of `var`
 * ex: let foo = 'bar'
 *
 * Require object literal shorthand syntax
 * ex: `var foo = {a: a}` vs `var foo = {a}`
 * @param - always, methods, never, properties
 *
 * prefer-arrow-callback
 * Require arrow functions in callbacks
 * ex: `foo(a => a)` vs `foo(function(a) { return a })`
 *
 * prefer-const
 * Require `const` if var is never modified
 * ex: `let foo = bar` vs `const foo = bar`
 *
 * prefer-spread
 * Require spread operator instead of apply
 * ex: `Function.prototype.apply(args)` vs `Function.prototype(...args)`
 *
 * prefer-reflect
 * Require Reflect api instead of old constructor methods
 * ex: `Reflect.apply()` vs `foo.apply()`
 *
 * prefer-template
 * Require template literals over string concatenation
 * ex: `"str "+var` vs ``str ${var}``
 *
 * require-yield
 * Require yield keyword in generator functions
 * ex: `function* foo() { yield bar }`
 */

////////////////////////////////////////////////////////////
// Legacy
////////////////////////////////////////////////////////////
/**
 *
 * Cap the number of times blocks are allowed to nest
 * ex: foo() { bar() { baz() {}}}
 * @param - integer
 *
 * Maximum line length allowed
 * @param - total characters on a line
 * @param - how many characters to count \t as
 *
 * max-params
 * Maximum function params allowed
 * ex: function(foo, bar, baz, qux){}
 * @param - integer
 *
 * max-statements
 * Maximum statements allowed in a function
 * ex: foo() { var a; var b; var c; var d;}
 * @param - integer
 *
 * Disallow bitwise operators
 * ex: var foo = bar | baz
 *
 * no-plusplus
 * Disallow `++` and `--`
 * ex: `foo++` vs `foo += 1`
 */
