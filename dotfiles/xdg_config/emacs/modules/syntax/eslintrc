// -*-json-*-
////////////////////////////////////////////////////////////
// ESLint configuration
// github.com/codekirei
// current ESLint v1.5.1 (9.22.15)
////////////////////////////////////////////////////////////
// Active Settings
{
  "env" : {
    "es6": true,
    "mocha": true,
    "node" : true
  },
  "rules" : {
    "comma-dangle" : [2, "never"],
  }
}

////////////////////////////////////////////////////////////
// Parsers
////////////////////////////////////////////////////////////

// default:
// "parser": "esprima",
// using babel:
// "parser": "babel-eslint",

////////////////////////////////////////////////////////////
// Environments
////////////////////////////////////////////////////////////

// "amd": true,
// "applescript": true,
// "browser": true,
// "commonjs": true,
// "embertest": true,
// "es6": true,
// "jasmine": true,
// "jest": true,
// "jquery": true,
// "meteor": true,
// "mocha": true,
// "mongo": true,
// "node" : true
// "phantomjs": true,
// "prototypejs": true,
// "protractor": true,
// "qunit": true,
// "serviceworker": true,
// "shelljs": true,
// "worker": true,

////////////////////////////////////////////////////////////
// Globals
////////////////////////////////////////////////////////////

// "globals" : {
//   "foo": false
// },

////////////////////////////////////////////////////////////
// Possible Errors
////////////////////////////////////////////////////////////
/**
 * comma-dangle
 * Allow comma after last entity in object or array
 * @example var foo = ['a', 'b',]
 * @param - never, always, always-multiline
 */
/**
 * Disallow assignment in conditional statement
 * @example if (a = b) { foo() }
 * @param - except-parens, always
 */
//"no-cond-assign" : [2, "except-parens"],

/**
 * Disallow use of console
 * @example console.log()
 */
//"no-console" : 0,

/**
 * Disallow conditional statements that are constant
 * @example if (true) { foo() }
 */
//"no-constant-condition" : 2,

/**
 * Disallow special ASCII chars (0-31) in regex
 * @example /\\x1f/
 */
//"no-control-regex" : 2,

/**
 * Disallow use of debugger
 * @example debugger;
 */
//"no-debugger" : 2,

/**
 * Disallow multiple identical function params
 * @example function foo(a, a){}
 */
//"no-dupe-args" : 2,

/**
 * Disallow multiple identical object keys
 * @example var foo = {a: true, a: true}
 */
//"no-dupe-keys" : 2,

/**
 * Disallow multiple identical case labels in a switch statement
 * @example case 1: break; case 1: break;
 */
//"no-duplicate-case" : 2,

/**
 * Disallow empty block statements
 * @example if (foo) {}
 */
//"no-empty" : 2,

// FIXME change to no-empty-character-class
/**
 * Disallow empty character classes in regex
 * @example /^abc[]/
 */
//"no-empty-class" : 2,

/**
 * Disallow assignment to the catch param in a try/catch block
 * @example try {} catch(e) { e = foo }
 */
//"no-ex-assign" : 2,

/**
 * Disallow unnecessary double negation of boolean constructs
 * @example if (!!true) {}
 */
//"no-extra-boolean-cast" : 2,

/**
 * Disallow unnecessary parens
 * @example var a = (1 + 2)
 */
"no-extra-parens" : 2,

/**
 * Disallow unnecessary semi-colons
 * @example var a = 1;;
 */
//"no-extra-semi" : 2,

/**
 * Disallow reassigning a previously declared function
 * @example function foo() { foo = bar }
 */
//"no-func-assign" : 2,

/**
 * Disallow non-top-level function declaration
 * @example if (foo) { function a() {}}
 * @param - functions, both
 */
/"no-inner-declarations" : [2, "functions"],

/**
 * Disallow malformed regex
 * @example /'[']/
 */
//"no-invalid-regexp" : 2,

/**
 * Disallow alternative whitespace characters like NBSP
 * @example \u00A0
 */
//"no-irregular-whitespace" : 2,

/**
 * Disallow negated left operand of `in` operator
 * @example (!a in b)
 */
//"no-negated-in-lhs" : 2,

/**
 * Disallow calling global objects as functions
 * @example var foo = JSON()
 */
//"no-obj-calls" : 2,

/**
 * Disallow multiple spaces in regex
 * @example /foo  bar/ vs /foo {2}bar/
 */
//"no-regex-spaces" : 2,

/**
 * Disallow arrays with empty slots
 * @example var foo = [,,]
 */
//"no-sparse-arrays" : 2,

/**
 * Disallow code that will never execute
 * @example function a() { return; console.log('nope')}
 */
//"no-unreachable" : 2,

/**
 * Disallow use of NaN (use isNan() instead)
 * @example if (foo == NaN) {}
 */
//"use-isnan" : 2,

/**
 * Validate that JSDoc comments are syntactically correct
 */
//"valid-jsdoc" : 0,

/**
 * Validate that `typeof` comparisons use a valid `typeof` string
 * @example `typeof foo === 'nubmer'` would error
 */
//"valid-typeof" : 2,

// FIXME no unexpected multiline

////////////////////////////////////////////////////////////
// Best Practices
////////////////////////////////////////////////////////////

// FIXME accessor-pairs

/**
 * Disallow use of a var outside the scope it is declared in
 * @example `var a = 1; function b() { console.log(a); };` would error
 */
//"block-scoped-var" : 0,

/**
 * Cap number of linear logic branches
 * @example if(foo) {} else if (bar) {} else (baz) {}
 * @param - integer
 */
//"complexity" : [0, 0],

/**
 * Require each function to consistently return or not return a value
 * @example `return foo;` vs `return;`
 */
//"consistent-return" : 2,

/**
 * Require curly braces around block statements
 * @example `if (foo) return;` would error
 * @param - all, multi-line, multi
 */
"curly" : [2, "multi-line"],

/**
 * Require default case in switch statement
 * @example switch (foo) { case 1: break; default:}
 */
//"default-case" : 0,

/**
 * Require dot notation where possible
 * @example `foo.bar` vs `foo["bar"]`
 */
//"dot-notation" : [2, {"allowKeywords": true, "allowPattern": ""}]

/**
 * Enforce newline before or after dot in object.property
 * @example `object. \n property` vs `object \n .property`
 * @param - object, property
 */
"dot-location" : [2, "property"],

/**
 * Require type-safe equality operators
 * @example `===` vs `==`
 * @param - smart, allow-null
 */
//"eqeqeq" : 2,

/**
 * Require `if` statement in `for in` loop
 * @example for (key in foo) { if (bar) { baz }}
 */
//"guard-for-in" : 0,

/**
 * Disallow `alert`, `confirm`, and `prompt`
 * @example alert('hello world')
 */
//"no-alert" : 2,

/**
 * Disallow `arguments.caller` and `arguments.callee`
 * @example function foo() { var callee = arguments.callee }
 */
//"no-caller" : 2,

/**
 * Disallow regex that looks like division
 * @example `/=foo/` vs `/\=foo/`
 */
//"no-div-regex" : 0,

/**
 * Disallow `else` after `return`
 * @example if (foo) { return; } else { bar() }
 */
"no-else-return" : 2,

/**
 * Disallow labels for anything other than iteration or `switch`
 * @example label: \n var x = 1
 */
//"no-empty-label" : 2,

/**
 * Disallow non-type-safe comparing to null
 * @example if (foo == null) {}
 */
"no-eq-null" : 2,

/**
 * Disallow `eval()`
 * @example eval()
 */
//"no-eval" : 2,

/**
 * Disallow extending native objects
 * @example Object.prototype.method = {}
 */
//"no-extend-native" : [2, {"exceptions": []}],

/**
 * Disallow `.bind()` on functions not using `this`
 * @example function foo() { return bar; }.bind(baz)
 */
//"no-extra-bind" : 2,

/**
 * Disallow `switch` `case` without `break`, `throw`, or `return`
 * @example switch(foo) { case 1: bar; case 2: baz;}
 */
//"no-fallthrough" : 2,

/**
 * Disallow leading or trailing decimals in numeric literals
 * @example `.5` vs `0.5`
 */
"no-floating-decimal" : 2,

// FIXME no implicit coercion
/**
 * Prohibit code that is functionally equivalent to eval()
 * @example setTimeout("alert('hello world');", 50)
 */
//"no-implied-eval" : 2,

// FIXME no invalid this
/**
 * Disallow usage of `__iterator__` prop
 * @example Foo.prototype.__iterator__ = {}
 */
"no-iterator" : 0,

/**
 * Disallow labeled statements
 * @example label: while (true) { while (true) { break label; }}
 */
//"no-labels" : 2,

/**
 * Disallow unnecessarily nested blocks
 * @example {\n var foo = 1; \n}
 */
//"no-lone-blocks" : 2,

/**
 * Disallow creating functions inside loops
 * @example for (var a of b) { function() {}}
 */
//"no-loop-func" : 2,

/**
 * Disallow multiple spaces
 * @example var  a = 1
 */
"no-multi-spaces" : 0,

/**
 * Disallow multiline strings
 * @example "Line 1 \ \n Line 2";
 */
//"no-multi-str" : 2,

/**
 * Disallow reassigning native objects
 * @example String = 'nope'
 */
//"no-native-reassign" : 2,

/**
 * Disallow `new` without assigment or comparison
 * @example `new Class()` vs `var foo = new Class()`
 */
//"no-new" : 2,

/**
 * Disallow `new Function()`
 * @example var foo = new Function()
 */
//"no-new-func" : 2,

/**
 * Disallow `new` with `String`, `Number`, and `Boolean`
 * @example var foo = new Number(1)
 */
//"no-new-wrappers" : 2,

/**
 * Disallow ocal literals
 * @example var num = 071
 */
//"no-octal" : 2,

/**
 * Disallow escaped octals in strings
 * @example var foo = "Abc \071"
 */
//"no-octal-escape" : 2,

/**
 * Disallow reassigning function params
 * @example function foo(bar) { bar = baz }
 */
//"no-param-reassign" : 0,

/**
 * Disallow `process.env`
 * @example if(process.env.NODE_ENV === "dev") {}
 */
"no-process-env" : 2,

/**
 * Disallow use of `__proto__` (use `getPrototypeOf` instead)
 * @example var foo = obj.__proto__
 */
//"no-proto" : 2,

/**
 * Disallow multiple declarations of same var
 * @example  var a = 1; var a = 2
 */
//"no-redeclare" : 2,

/**
 * Disallow assignment in return statement
 * @example function foo() { return bar = baz }
 */
//"no-return-assign" : 2,

/**
 * Disallow `javascript:`
 * @example location.href = "javascript:void(0)";
 */
//"no-script-url" : 2,

/**
 * Disallow comparisons between identical entities
 * @example var a = 1; if (a === a) {}
 */
"no-self-compare" : 2,

/**
 * Disallow use of comma operator
 * @example var a = (3, 5)
 */
//"no-sequences" : 2,

/**
 * Restrict what `throw` can throw
 * @example throw 'err'
 */
"no-throw-literal" : 2,

/**
 * Disallow expressions that are never used
 * @example "Hello world";
 */
//"no-unused-expressions" : 2,

// FIXME no-useless-call
// FIXME no-useless-concat
/**
 * Disallow use of `void`
 * @example function foo() { return void 0; }
 */
"no-void" : 2,

/**
 * Disallow comments containing specific terms
 * @example // Todo: write error handler
 */
//"no-warning-comments" : [0, { "terms": ["todo", "fixme", "xxx"], "location": "start" }],

/**
 * Disallow `with` statement
 * @example with (foo) {}
 */
//"no-with" : 2,

/**
 * Require radix parameter in `parseInt()`
 * @example parseInt('071', 10)
 */
//"radix" : 0,

/**
 * Disallow var declarations anywhere other than top of respective scope
 * @example function() {}; var a = 1
 */
//"vars-on-top" : 0,

/**
 * Require immediately invoked function expressions to be wrapped in parens
 * @example (function() { return foo; }())
 * @param - outside, inside, any
 */
"wrap-iife" : [2, "inside"],

/**
 * Require or disallow yoda conditions
 * @example if (color === 'red') vs if ('red' === color)
 * @param - never, always
 */
"yoda" : [2, "never", { "exceptRange": true}],

////////////////////////////////////////////////////////////
// Strict Mode
////////////////////////////////////////////////////////////

/**
 * Controls use and location of stict directive
 * @example "use strict";
 * @param - never, global, function
 */
"strict" : [2, "never"],

////////////////////////////////////////////////////////////
// Variables
////////////////////////////////////////////////////////////

// FIXME init-declarations
/**
 * IE <= 8 bug with try/catch
 * @example var err = 1; try { throw 2; } catch(err) {}; console.log(err)
 */
//"no-catch-shadow" : 0,

/**
 * Disallows `delete` operator on vars
 * @example var a; delete a
 */
//"no-delete-var" : 2,

/**
 * Disallow labels with identical names to vars
 * @example var x = 1; function bar() { x: ... }
 */
//"no-label-var" : 2,

/**
 * Disallow redeclaring vars from containing scope
 * @example var foo = 1; function() { var foo = 2 }
 */
//"no-shadow" : 2,

/**
 * Disallow reassigning restricted names like `undefined`
 * @example var undefined = 'foo'
 */
//"no-shadow-restricted-names" : 2,

/**
 * Disallow undeclared vars
 * @example a = 1
 */
//"no-undef" : 2,

/**
 * Disallow assigning vars to `undefined`
 * @example var foo = undefined
 */
//"no-undef-init" : 2,

/**
 * Disallow use of `undefined` (use typeof and void 0)
 * @example if (foo === undefined) { ... } else { return undefined }
 */
"no-undefined" : 2,

/**
 * Disallow declaring vars that are not used
 * @param vars - all, local
 * @param args - all, after-used, none
  */
"no-unused-vars" : [2, {"vars": "local", "args": "none"}],

/**
 * Disallow use of vars and functions pre-declaration (despite hoisting)
 * @example console.log(a); var a = 'foo'
 */
//"no-use-before-define" : 2,

////////////////////////////////////////////////////////////
// Node.js
////////////////////////////////////////////////////////////

// FIXME callback-return
// FIXME global-require
/**
 * Require handling the callback error
 * @example function foo(err, res) { if (err) { ... } }
 * @param - regex to match error param
 */
"handle-callback-err" : [2, "^.*(e|E)rr" ],

/**
 * Disallow grouped variable declarations mixing types
 * @example var a = 'foo', fs = require('fs')
 * @param - boolean that checks require types
 */
//"no-mixed-requires" : 1,

/**
 * Disallow `new require` expression
 * @example var server = new require('express')
 */
//"no-new-require" : 2,

/**
 * Disallow path concatenation (use path.join())
 * @example var filePath = __dirname + '/aFile.js'
 */
//"no-path-concat" : 2,

/**
 * Disallow use of `process.exit()`
 * @example try { ... } catch(err) { process.exit(1) }
 */
//"no-process-exit" : 2,

/**
 * Blacklist node modules
 * @param - comma-joined list of strings to blacklist
 */
//"no-restricted-modules" : 0,

/**
 * Disallow synchronous methods (async is usually preferable)
 * @example fs.readFileSync('aFile.js', 'utf8')
 */
//"no-sync" : 0,

////////////////////////////////////////////////////////////
// Stylistic Issues
////////////////////////////////////////////////////////////

// FIXME array-bracket-spacing

// FIXME block-spacing
/**
 * Require specific brace placement
 * @param - 1tbs, stroustrup
 * @param allowSingleLine - boolean
 */
"brace-style" : [2, "1tbs", {"allowSingleLine": true}],

/**
 * Require camelCase
 * @example `var fooBar` vs `var foo_bar`
 * @param properties - always, never
 */
//"camelcase" : [2, {"properties": "always"}],

/**
 * Require comma spacing
 * @example var a, b ,c
 * @param before - boolean
 * @param after - boolean
 */
//"comma-spacing" : [2, {"before": false, "after": true}],

/**
 * Require specific comma placement in multi-line lists
 * @example `, a = "foo"` vs `a = "foo",`
 * @param - last, first
 */
"comma-style" : [2, "last"],

// FIXME computed-property-spacing
/**
 * Require a specific var name when assigning `this`
 * @example var self = this
 * @param - a string
 */
//"consistent-this" : 0,

/**
 * Require file to end with newline
 */
//"eol-last" : 2,

/**
 * Disallow anonymous functions (helpful for debugging)
 * @example `function() {}` vs `function foo()`
 */
//"func-names" : 0,

/**
 * Require function declaration or expression style
 * @example `var foo = function(){}` vs `function foo(){}`
 * @param - declaration, expression
 */
"func-style" : [2, "declaration"],

// FIXME id-length
// FIXME id-match
/**
 * Require specific indentation style
 * @param - number of spaces or "tab"
 */
"indent" : [2, 2],

// FIXME jsx-quotes
/**
 * Require specific spacing around the colon between object keys and values
 * @example `key: val` vs `key :val` vs `key : val`
 *  beforeColon: false,
 *  afterColon: true,
 * }]
 * @param align - value, colon
 */
"key-spacing" : 0,

// FIXME lines-around-comment
/**
 * Disallow mixing CRLF and LF
 * @example `\r\n` vs `\n`
 * @param - unix, windows
 */
"linebreak-style" : [2, "unix"],

/**
 * Disallow nesting logic beyond a specific number
 * @example function foo() { function bar() { function baz() {}}}
 * @param - number of maximum acceptable callbacks
 */
"max-nested-callbacks" : [2, 2],

/**
 * Require constructors to be capitalized
 * @example `var foo = new Bar()`
 * @param {Array} newIsCapExceptions
 * @param {Array} capIsNewExceptions
 */
//"new-cap" : [2, {newIsCap: true, capIsNew: true}],

/**
 * Require parens when invoking a constructor even without arguments
 * @example `var foo = new Bar()` vs `var foo = new Bar`
 */
//"new-parens" : 2,

/**
 * Require or disallow a blank newline after var declarations
 * @param - always, never
 */
//"newline-after-var" : 0,

/**
 * Disallow array constructor
 * @example var foo = new Array(1, 2, 3)
 */
//"no-array-constructor" : 2,

/**
 * Disallow continue statement
 * @example if(foo) { continue; }
 */
"no-continue" : 2,

/**
 * Disallow comments on the same line as code
 * @example var foo = 1 // blah blah blah
 */
"no-inline-comments" : 2,

/**
 * Disallow if as only statement in else block
 * @example `if(foo) {bar} else { if (baz) {qux} }` vs `else if`
 */
"no-lonely-if" : 2,

/**
 * Disallow indenting with spaces and tabs on same line
 * @param - "smart-tabs" allows mixing when used for vertical alignment
 */
//"no-mixed-spaces-and-tabs" : 2,

/**
 * Control number of consecutive blank lines allowed
 * @example var foo = 1 \n\n //logic
 * @param max - number of empty lines allowed consecutively
 */
"no-multiple-empty-lines" : [2, {"max": 1}],

/**
 * Disallow nesting ternary expressions
 * @example var foo = a ? b : c === d ? e : f
 */
//"no-nested-ternary" : 0,

/**
 * Disallow object constructor
 * @example var obj = new Object()
 */
//"no-new-object" : 2,

/**
 * Disallow space between function name and args
 * @example `fn ()` vs `fn()`
 */
//"no-spaced-func" : 2,

/**
 * Disallow ternary operators
 * @example var foo = bar ? baz : qux
 */
//"no-ternary" : 0,

/**
 * Disallow trailing whitespace at end of line
 * @param {boolean}
 */
//"no-trailing-spaces" : [2, {skipBlankLines: false}],

/**
 * Disallow dangling underscores in identifiers
 * @example var _foo
 */
//"no-underscore-dangle" : 2,

/**
 * Disallow boolean literals in ternary expressions
 * @example var foo = test === 1 ? true : false
 */
"no-unneeded-ternary" : 2,

// FIXME object curly spacing

/**
 * Require or disallow one grouped var delcaration per scope block
 * @example `var foo, bar;` vs `var foo; var bar;`
 * @param - always, never
 */
//"one-var" : 0,

/**
 * Require or disallow shorthand for simple mathmatical assignment
 * @example `x += y` vs `x = x + y`
 * @param - always, never
 */
"operator-assignment" : [2, "always"],

/**
 * Require or disallow shorthand for simple mathmatical assignment
 * @example var foo = 'string1' + \n 'string2'
 * @param - after, before, none
 */
//"operator-linebreak" : 0,

/**
 * Require or disallow blank lines at the beginning and end of blocks
 * @example function foo(){ \n ... \n }
 * @param - always, never
 */
"padded-blocks" : [2, "never"],

/**
 * Require or disallow quoted object keys
 * @example var obj = { "a": 1}
 * @param - always, as-needed
 */
"quote-props" : [2, "as-needed"],

/**
 * Require single, double, or back ticks for string literals
 * @example "string" vs 'string' vs `string`
 * @param - single, double, backtick
 * @param avoid-escape - allows other tickmarks to avoid escaping nested quotes
 */
"quotes" : [2, "single"],

// FIXME require jsdoc
/**
 * Disallow or require semicolons at the end of statements
 * @example `var foo` vs `var foo;`
 * @param - always, never
 */
"semi" : [2, "never"],

/**
 * Require spacing before or after semicolons
 * @example var foo ;var bar; var baz
 * @param {boolean} before
 * @param {boolean} after
 */
//"semi-spacing" : [2, {"before": false, "after": true}],

/**
 * Require alphabatizing vars declared in the same block
 * @example `var a, b` vs `var b, a`
 * @param {boolean} ignoreCase
 */
//"sort-vars" : 0,

/**
 * Require or disallow spaces after certain keywords like if, else, for
 * @example `if(a) {foo}` vs `if (a) {foo}`
 * @param - always, never
 */
"space-after-keywords" : [2, "always"],

// FIXME space before keywords
/**
 * Require or disallow spaces before blocks
 * @example `if (a) {foo}` vs `if (a){foo}`
 * @param - always, never
 */
"space-before-blocks" : [2, "always"],

/**
 * Require or disallow spaces between functions and invocations
 * @example `function foo()` vs `function foo ()`
 * @param anonymous - always, never
 * @param named - always, never
 */
"space-before-function-paren" : [2, "never"],

// FIXME im ded -> object curly spacing / array bracket spacing
/**
 * Require or disallow spaces in brackets
 * @example `{ foo: 'bar' }` vs `{foo: 'bar'}`
 * @param - always, never
 */
"space-in-brackets" : 2,

/**
 * Require or disallow spaces in parens
 * @example `foo( bar )` vs `foo(bar)`
 * @param - always, never
 */
"space-in-parens" : 2,

/**
 * Require spaces around infix operators
 * @example `1 + 2` vs `1+2`
 * @param {boolean} int32Hint - allow foo|0 to force signed 32bit int
 */
"space-infix-ops" : [2, {"int32Hint": true}],

/**
 * Require spaces after `return`, `throw`, and `case`
 * @example `case'a'` vs `case 'a'`
 */
//"space-return-throw-case" : 2,

/**
 * Require or disallow spaces around unary operators
 * @example `i++` vs `i ++`
 * @param {boolean} words - e.g. `new`, `typeof`
 * @param {boolean} nonwords - e.g. `++`, `!`
 */
"space-unary-ops" : [2, {"words": true, "nonwords": false}],

// FIXME im ded -> spaced-comment
/**
 * Requires or disallows whitespace at start of single line comment (`//`)
 * @example `//foo` vs `// foo`
 * @param - always, never
 * @param {string[]} exceptions
 */
//"spaced-line-comment" : 0,

/**
 * Require regex literals to be wrapped in parens
 * @example (/foo/)
 */
//"wrap-regex" : 0,

////////////////////////////////////////////////////////////
// ES6
////////////////////////////////////////////////////////////

// FIXME arrow-parens
// FIXME arrow-spacing
// FIXME constructor-super
/**
 * Require or disallow spaces around the star in generator functions
 * @example `function * foo()` vs `function* foo()` vs `function *foo()`
 * @param - before, after, both, neither
 */
//"generator-star-spacing" : 0,

// FIXME no-class-assign
// FIXME no-const-assign
// FIXME no-dupe-class-memebers
// FIXME no this-before-super
/**
 * Require `let` or `const` instead of `var`
 * @example let foo = 'bar'
 */
//"no-var" : 2,

/**
 * Require object literal shorthand syntax
 * @example `var foo = {a: a}` vs `var foo = {a}`
 * @param - always, methods, never, properties
 */
"object-shorthand" : 2,

// FIXME prefer arrow callback
// FIXME prefer const
// FIXME prefer spread
// FIXME prefer refelct
// FIXME prefer template
// FIXME require yield

////////////////////////////////////////////////////////////
// Legacy
////////////////////////////////////////////////////////////

/**
 * Cap the number of times blocks are allowed to nest
 * @example foo() { bar() { baz() {}}}
 * @param - integer
 */
"max-depth" : [2, 3],

/**
 * Maximum line length allowed
 * @param - total characters on a line
 * @param - how many characters to count \t as
 */
"max-len" : [2, 80, 4],

/**
 * Maximum function params allowed
 * @example function(foo, bar, baz, qux){}
 * @param - integer
 */
//"max-params" : 0,

/**
 * Maximum statements allowed in a function
 * @example foo() { var a; var b; var c; var d;}
 * @param - integer
 */
//"max-statements" : 0,

/**
 * Disallow bitwise operators
 * @example var foo = bar | baz
 */
"no-bitwise" : 2,

/**
 * Disallow `++` and `--`
 * @example `foo++` vs `foo += 1`
 */
//"no-plusplus" : 0
